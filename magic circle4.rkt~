#lang racket
(require gigls/unsafe)


(define split-num 
  (lambda (num)
    (list (quotient num 100)
          (remainder (quotient num 10) 10)
          (remainder num 10))
    )
  )


(define draw-bg
  (lambda (image color)
       (let* ([bgcolor (irgb (- (irgb-red color) 50)
                             (- (irgb-green color) 50)
                             (- (irgb-blue color) 50))]
              [bgcolor2 (irgb (- (irgb-red color) 240)
                             (- (irgb-green color) 240)
                             (- (irgb-blue color) 240))]
              [icolor (irgb-complement bgcolor)]
              [innercolor (irgb (- (irgb-red icolor) 50)
                             (- (irgb-green icolor) 50)
                             (- (irgb-blue icolor) 50))]
              [center-col (/ (image-width image) 2)]
              [center-row (/ (image-height image) 2)]
              [h-axis (/ (image-width image) 5)]
              [v-axis (/ (image-width image) 10)]
              [a h-axis]
              [b v-axis]
              [r1 (lambda (x y) (floor (/ (* 1.1 a) (sqrt (- 1 (* (- 1 (sqr (/ (* 1.1 a) (* 1.1 b))))
                                                          (/ (sqr (- y center-row))
                                                             (+ (sqr (- x center-col))
                                                                (sqr (- y center-row))))))))))]
              [r2 (lambda (x y) (floor (/ (* 2 a) (sqrt (- 1 (* (- 1 (sqr (/ (* 2 a) (* 2 b))))
                                                          (/ (sqr (- y center-row))
                                                             (+ (sqr (- x center-col))
                                                                (sqr (- y center-row))))))))))]
              [r3 (lambda (x y) (floor (/ (* 0.9 a) (sqrt (- 1 (* (- 1 (sqr (/ (* 0.9 a) (* 0.9 b))))
                                                          (/ (sqr (- y center-row))
                                                             (+ (sqr (- x center-col))
                                                                (sqr (- y center-row))))))))))]
              
         [bg (image-compute
          (lambda (x y)
            (cond 
              [(and (> (+ (/ (sqr(- x center-col)) (sqr (* 2 a)))
                      (/ (sqr(- y center-row)) (sqr (* 2 b)))) 1)
                        (or (not (= x center-col)) (not (= y center-row))))
                   (irgb (* (irgb-red bgcolor2) (+ 1 (sin (/ (sqrt (+ (sqr (- x center-col)) (sqr (- y center-row)))) (/ a 3)))))
                         (* (irgb-green bgcolor2) (+ 1 (sin (/ (sqrt (+ (sqr (- x center-col)) (sqr (- y center-row)))) (/ a 3)))))
                         (* (irgb-blue bgcolor2) (+ 1 (sin (/ (sqrt (+ (sqr (- x center-col)) (sqr (- y center-row)))) (/ a 3))))))
                   
                   ]
              [(and (> (+ (/ (sqr(- x center-col)) (sqr h-axis))
                      (/ (sqr(- y center-row)) (sqr v-axis))) 1)
                    (<= (+ (/ (sqr(- x center-col)) (sqr (* 2 a)))
                      (/ (sqr(- y center-row)) (sqr (* 2 b)))) 1)
                        (or (not (= x center-col)) (not (= y center-row))))
                   (irgb (- (irgb-red bgcolor) 
                            (* (/ (- (sqrt (+ (sqr (- x center-col)) 
                                           (sqr (- y center-row))))
                                     (r1 x y))
                                  (- (r2 x y) (r1 x y)))
                               (irgb-red bgcolor)))
                         (- (irgb-green bgcolor) 
                            (* (/ (- (sqrt (+ (sqr (- x center-col)) 
                                           (sqr (- y center-row))))
                                     (r1 x y))
                                  (- (r2 x y) (r1 x y)))
                               (irgb-green bgcolor)))
                         (- (irgb-blue bgcolor) 
                            (* (/ (- (sqrt (+ (sqr (- x center-col)) 
                                           (sqr (- y center-row))))
                                     (r1 x y))
                                  (- (r2 x y) (r1 x y)))
                               (irgb-blue bgcolor))))
                   
                   ]
                  [(and (<= (+ (/ (sqr(- x center-col)) (sqr h-axis))
                      (/ (sqr(- y center-row)) (sqr v-axis))) 1)
                        (or (not (= x center-col)) (not (= y center-row))))
                   (irgb (+ (irgb-red innercolor) 
                            (* (/ (sqrt (+ (sqr (- x center-col)) 
                                           (sqr (- y center-row)))) 
                                  (r3 x y))
                               (- (irgb-red bgcolor) (irgb-red innercolor))))
                         (+ (irgb-green innercolor) 
                            (* (/ (sqrt (+ (sqr (- x center-col)) 
                                           (sqr (- y center-row)))) 
                                  (r3 x y))
                               (- (irgb-green bgcolor) (irgb-green innercolor))))
                         (+ (irgb-blue innercolor) 
                            (* (/ (sqrt (+ (sqr (- x center-col)) 
                                           (sqr (- y center-row)))) 
                                  (r3 x y))
                               (- (irgb-blue bgcolor) (irgb-blue innercolor)))))
                   
                   ]
                  [else innercolor]
                  
                  ))
          (image-width image) (image-height image)
          )]
         
         )
         (image-copy-paste-block! bg 0 0 image 0 0 (image-width image) (image-height image))
         )
    
  ))


(define 25-num
  (lambda ()
    (let kernel ([list-so-far '()]
                 [n 25])
      (cond [(< n 1)
          list-so-far]
          [else (kernel (cons (random 25) list-so-far)
          (- n 1))])
    
    ))
  )

(define star-col1 (25-num))
(define star-row1 (25-num))
(define star-col2 (25-num))
(define star-row2 (25-num))
(define draw-central-circles
  (lambda (image circle-num left top right bottom)
    (let* ([x-dis (/ (- right left) circle-num 2)]
           [y-dis (/ (- bottom top) circle-num 2)]
           [lefts (map (l-s + left) (map (l-s * x-dis) (iota circle-num)))]
           [tops  (map (l-s + top) (map (l-s * y-dis) (iota circle-num)))]
           [widths (map (l-s - (- right left)) (map (l-s * (* x-dis 2)) (iota circle-num)))]
           [heights (map (l-s - (- bottom top)) (map (l-s * (* y-dis 2)) (iota circle-num)))]
           [draw-one-circle! (lambda (l t width height)
                               (image-select-ellipse! image REPLACE 
                                                      l t width height)
                               (image-stroke-selection! image)
                               (image-select-nothing! image)
                               )])
      (for-each draw-one-circle! lefts tops widths heights)
      )
    
    )
  
  )


(define generate-color
  (lambda (num)
    (cond [(= num 0)
           (irgb 255 255 255)]
          [(= num 1)
           (irgb 255 150 150)]
          [(= num 2)
           (irgb 200 200 255)]
          [(= num 3)
           (irgb 200 255 200)]
          [(= num 4)
           (irgb 230 200 255)]
          [(= num 5)
           (irgb 255 255 200)]
          [(= num 6)
           (irgb 255 192 203)]
          [(= num 7)
           (irgb 200 255 255)]
          [(= num 8)
           (irgb 192 203 255)]
          [(= num 9)
           (irgb 192 255 203)])
  
  ))

(define world (image-new 200 200))

(define draw-pentagon
  (lambda (image start-col start-row R ratio draw-or-not start-angle)
    (let* ([in (/ (* 2 pi) 5)]
           [create-col-point (map (lambda (n)(+ start-col (* R (cos (+ start-angle (* n in)))))) (iota 5))]
           [create-row-point (map (lambda (n)(- start-row (* R (sin (+ start-angle (* n in)))))) (iota 5))]
           [variant-col (lambda (n) (+ (* start-col (- 1 ratio)) (* n ratio)))]
           [create-point (lambda (n)
                           (cons (+ start-col (* R (cos (+ start-angle (* n in)))))
                                 (- start-row (* R (sin (+ start-angle (* n in)))))))]
           [create-points (map create-point (iota 5))]
           [my-col-point (map variant-col create-col-point)]
           [my-points (let kernel ([i 0]
                                   [cur-points '()]
                                       )
                        (cond [(>= i 5)
                               (reverse cur-points)]
                            [else
                             (kernel (+ i 1)
                              (cons (cons (+ (* start-col (- 1 ratio)) (* (car (list-ref create-points i)) ratio)) 
                                           (cdr (list-ref create-points i)))
                                  cur-points
                                   ))]))])
           (cond [(equal? draw-or-not #t)
                  (image-select-polygon! image REPLACE my-points)
                   (image-stroke-selection! image)
                    (image-select-nothing! image)]
                 [else (list my-col-point create-row-point)]))))

  

(define roman-num
  (lambda (image h k R ratio num)
    (let* ([urow (- k (/ R 1.5))]
           [lrow (+ k (/ R 1.5))]
           [cols (map (l-s + h) (map (r-s * (/ (* R 0.8) 3)) (map (r-s - 3)(iota 7))))]
           [my-cols (map (l-s + (* h (- 1 ratio))) (map (l-s * ratio) cols))])
      (cond [(= num 0)
             (image-draw-line! image (list-ref my-cols 1)
                                     urow
                                     (list-ref my-cols 5)
                                     lrow)
             (image-draw-line! image (list-ref my-cols 1)
                                     lrow
                                     (list-ref my-cols 5)
                                     urow)]
            [(= num 1)
             (image-draw-line! image (list-ref my-cols 3)
                                     urow
                                     (list-ref my-cols 3)
                                     lrow)]
            [(= num 2)
             (image-draw-line! image (list-ref my-cols 2)
                                     urow
                                     (list-ref my-cols 2)
                                     lrow)
             (image-draw-line! image (list-ref my-cols 4)
                                     urow
                                     (list-ref my-cols 4)
                                     lrow)]
            [(= num 3)
             (image-draw-line! image (list-ref my-cols 1)
                                     urow
                                     (list-ref my-cols 1)
                                     lrow)
             (image-draw-line! image (list-ref my-cols 3)
                                     urow
                                     (list-ref my-cols 3)
                                     lrow)
             (image-draw-line! image (list-ref my-cols 5)
                                     urow
                                     (list-ref my-cols 5)
                                     lrow)]
            [(= num 4)
             (image-draw-line! image (list-ref my-cols 1)
                                     urow
                                     (list-ref my-cols 1)
                                     lrow)
             (image-draw-line! image (list-ref my-cols 2)
                                     urow
                                     (list-ref my-cols 3)
                                     lrow)
             (image-draw-line! image (list-ref my-cols 4)
                                     urow
                                     (list-ref my-cols 3)
                                     lrow)]
            [(= num 5)
             (image-draw-line! image (list-ref my-cols 1)
                                     urow
                                     (list-ref my-cols 3)
                                     lrow)
             (image-draw-line! image (list-ref my-cols 5)
                                     urow
                                     (list-ref my-cols 3)
                                     lrow)]
            [(= num 6)
             (image-draw-line! image (list-ref my-cols 1)
                                     urow
                                     (list-ref my-cols 2)
                                     lrow)
             (image-draw-line! image (list-ref my-cols 3)
                                     urow
                                     (list-ref my-cols 2)
                                     lrow)
             (image-draw-line! image (list-ref my-cols 4)
                                     urow
                                     (list-ref my-cols 4)
                                     lrow)]
            [(= num 7)
             (image-draw-line! image (list-ref my-cols 1)
                                     urow
                                     (list-ref my-cols 2)
                                     lrow)
             (image-draw-line! image (list-ref my-cols 3)
                                     urow
                                     (list-ref my-cols 2)
                                     lrow)
             (image-draw-line! image (list-ref my-cols 4)
                                     urow
                                     (list-ref my-cols 4)
                                     lrow)
             (image-draw-line! image (list-ref my-cols 5)
                                     urow
                                     (list-ref my-cols 5)
                                     lrow)]
            [(= num 8)
             (image-draw-line! image (list-ref my-cols 0)
                                     urow
                                     (list-ref my-cols 1)
                                     lrow)
             (image-draw-line! image (list-ref my-cols 2)
                                     urow
                                     (list-ref my-cols 1)
                                     lrow)
             (image-draw-line! image (list-ref my-cols 3)
                                     urow
                                     (list-ref my-cols 3)
                                     lrow)
             (image-draw-line! image (list-ref my-cols 4)
                                     urow
                                     (list-ref my-cols 4)
                                     lrow)
             (image-draw-line! image (list-ref my-cols 5)
                                     urow
                                     (list-ref my-cols 5)
                                     lrow)]
            [(= num 9)
             (image-draw-line! image (list-ref my-cols 2)
                                     urow
                                     (list-ref my-cols 2)
                                     lrow)
             (image-draw-line! image (list-ref my-cols 3)
                                     urow
                                     (list-ref my-cols 5)
                                     lrow)
             (image-draw-line! image (list-ref my-cols 3)
                                     lrow
                                     (list-ref my-cols 5)
                                     urow)])
      
      )
  ))


(define draw-magic-circle4
  (lambda (num width height)
   (let* ([nums (split-num num)]
          [fnum (car nums)]
          [snum (cadr nums)]
          [tnum (caddr nums)]
          [image (image-new width height)]
          [tommy (turtle-new image)]
          [HR (* 0.8 width)]
          [VR (* 0.8 height)]
          [ratio (/ width height)]
          [c-col (/ width 2)]
          [c-row (/ height 2)]
          [fgcolor (generate-color fnum)]
          [in* (/ (* (+ fnum 1) pi) (+ fnum 3))]
          [inner-pentagon-col (car (draw-pentagon image c-col c-row (/ (* (* 0.4 width) (sin (*(/ 54 180) pi))) 2) ratio #f (/ pi 3)))]
          [inner-pentagon-row (cadr (draw-pentagon image c-col c-row (/ (* (* 0.4 width) (sin (*(/ 54 180) pi))) 2) ratio #f (/ pi 3)))]
          [outer-pentagon-col (car (draw-pentagon image c-col c-row (* 0.4 width) ratio #f (/ pi 2)))]
          [outer-pentagon-row (cadr (draw-pentagon image c-col c-row (* 0.4 width) ratio #f (/ pi 2)))]
          )
     
      (draw-bg image fgcolor)
      
      
      (context-set-fgcolor! (irgb-lighter (irgb-lighter fgcolor)))
      (context-set-brush! "Star Brush #2")
      (for-each image-blot! (make-list 25 image)
                            (map ceiling (map (l-s * (/ width 25)) star-col1))
                            (map ceiling (map (l-s * (/ height 25)) star-row1)))
      
      (context-set-fgcolor! "white")
      (for-each image-blot! (make-list 25 image)
                            (map ceiling (map (l-s * (/ width 25)) star-col2))
                            (map ceiling (map (l-s * (/ height 25)) star-row2)))
      
     
      (context-set-fgcolor! "black")
      (context-set-brush! "2. Block 01")
     
      (context-set-fgcolor! fgcolor)
     
     
      (context-set-brush! "Nova")
      (image-select-ellipse! image REPLACE (* 0.1 width) (* 0.1 height) HR VR)
      (image-stroke-selection! image)
      (image-select-nothing! image)
           
      (context-set-brush! "Nova")
      (draw-pentagon image c-col c-row (* 0.4 width) ratio #t (/ pi 2))
      (draw-pentagon image c-col c-row (* (* 0.4 width) (sin (*(/ 54 180) pi))) ratio #t (/ (* 3 pi) 2))
      (for-each image-draw-line! (make-list 5 image)
                        inner-pentagon-col inner-pentagon-row 
                        (append (list (list-ref outer-pentagon-col 3) (list-ref outer-pentagon-col 4)) (list-take outer-pentagon-col 3))
                        (append (list (list-ref outer-pentagon-row 3) (list-ref outer-pentagon-row 4))(list-take outer-pentagon-row 3)))
     (for-each draw-central-circles (make-list 5 image) (make-list 5 2)
                                    (map (r-s - (* width 0.03)) inner-pentagon-col)
                                    (map (r-s - (* height 0.03)) inner-pentagon-row)
                                    (map (r-s + (* width 0.03)) inner-pentagon-col)
                                    (map (r-s + (* height 0.03))inner-pentagon-row))
     (for-each draw-central-circles (make-list 5 image) (make-list 5 fnum)
                                    (map (r-s - (* width 0.05)) outer-pentagon-col)
                                    (map (r-s - (* height 0.05)) outer-pentagon-row)
                                    (map (r-s + (* width 0.05)) outer-pentagon-col)
                                    (map (r-s + (* height 0.05)) outer-pentagon-row))
     
     (draw-central-circles image tnum (- c-col (* 0.1 width))
                                      (- c-row (* 0.1 height))
                                      (+ c-col (* 0.1 width))
                                      (+ c-row (* 0.1 height)))
     (roman-num image (* 0.5 width) (* 0.9 height) (* 0.03 (+ width height)) ratio snum) 
      (image-refresh-display! image)
      (image-show image)
     )
  ))